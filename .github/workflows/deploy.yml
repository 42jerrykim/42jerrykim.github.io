name: Deploy Hugo Site with Pagefind to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.147.9
    steps:
      # 1. Install Hugo CLI
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
          
      # 2. Install Dart Sass
      - name: Install Dart Sass
        run: sudo snap install dart-sass
        
      # 3. Checkout repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          
      # 4. Setup Pages
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
        
      # 5. Setup Node.js and install dependencies
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json
          
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
        
      # 6. Setup Python for Pagefind
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install Pagefind
        run: |
          python -m pip install --upgrade pip
          python -m pip install 'pagefind[extended]'
          
      # 7. Setup Hugo cache
      - name: Setup Hugo Cache
        uses: actions/cache@v3
        with:
          path: /tmp/hugo_cache
          key: ${{ runner.os }}-hugomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugomod-
            
      # 8. Build with Hugo
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: /tmp/hugo_cache
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
          TZ: Asia/Seoul
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
            
      # 9. Generate Pagefind Search Index
      - name: Generate Pagefind Search Index
        run: |
          echo "üîç Generating Pagefind search index..."
          python -m pagefind --site public --verbose --show-logs
          echo "‚úÖ Pagefind index generated successfully!"
          
      # 10. Verify build output
      - name: Verify Build Output
        run: |
          echo "üìä Build verification:"
          echo "Hugo public directory size: $(du -sh public/)"
          echo "Pagefind index size: $(du -sh public/pagefind/)"
          echo "Total files in public: $(find public -type f | wc -l)"
          ls -la public/pagefind/
          
      # 11. Upload artifact
      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Deployment Success
        run: |
          echo "üöÄ Site deployed successfully!"
          echo "üîó Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "üîç Search functionality powered by Pagefind" 